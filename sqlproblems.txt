


#left join for all in left Person table and null if no address....
select firstName, lastName, city, state from Person Left JOIN Address
ON Person.personId = Address.personId

https://leetcode.com/problems/combine-two-tables/submissions/

select count(city) - count(distinct City) from Station;
https://www.hackerrank.com/challenges/weather-observation-station-4/problem


https://www.hackerrank.com/challenges/weather-observation-station-5/problem?h_r=next-challenge&h_v=zen
select city, length(city) from station
order by length(city),city asc
limit 1;
select city, length(city) from station
order by length(city) desc
limit 1;

https://leetcode.com/problems/duplicate-emails/
# Write your MySQL query statement below
select email from Person having count(*) >1

i# Write your MySQL query statement below
select name as Customers from customers where id not in (select customerId from Orders)
https://leetcode.com/problems/customers-who-never-order

SELECT name AS Customers
FROM Customers AS c
LEFT JOIN Orders AS o
    ON c.id = o.customerId
WHERE o.id IS null

# Write your MySQL query statement below
select Email
from Person
group by Email
having count(Email) > 1;


https://leetcode.com/problems/delete-duplicate-emails/submissions/
# Write your MySQL query statement below
DELETE FROM PERSON
WHERE ID IN (
SELECT ID FROM
(SELECT P.*, ROW_NUMBER() OVER (PARTITION BY P.EMAIL ORDER BY P.ID) NUM
FROM PERSON P
)C WHERE NUM > 1
)


https://leetcode.com/problems/rising-temperature/
# Write your MySQL query statement below
SELECT
    weather.id AS 'Id'
FROM
    weather
        JOIN
    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1
        AND weather.Temperature > w.Temperature

https://leetcode.com/problems/big-countries
/* Write your PL/SQL query statement below */
select name, population, area from World where (area>='3000000' or population >='25000000')


https://leetcode.com/problems/classes-more-than-5-students
/* Write your PL/SQL query statement below */
select class from Courses
GROUP BY class
having count(student)>=5;


https://leetcode.com/problems/not-boring-movies/submissions/
# Write your MySQL query statement below
select id, movie, description, rating from Cinema
where id mod 2 = 1 and description != 'boring'
order by rating desc

#occupations hackerrank medioum
SELECT CONCAT(Name, "(", MID(Occupation, 1, 1), ")")
FROM OCCUPATIONS
ORDER BY Name;
SELECT CONCAT("There are a total of ", COUNT(Occupation)," ", LOWER(Occupation), "s.")
FROM OCCUPATIONS
GROUP BY Occupation
ORDER By COUNT(Occupation), Occupation




#https://www.hackerrank.com/challenges/occupations/problem?h_r=next-challenge&h_v=zen
/*
Enter your query here.
*/

SELECT name
FROM
    (select name from occupations)
    AS names
PIVOT
(
    count(occupation)
FOR
[occupation]
    IN ( name)
) AS pvt
ORDER BY name;

SELECT N,
CASE
    WHEN P IS NULL THEN 'Root'
    WHEN N IN (SELECT DISTINCT P FROM BST) THEN 'Inner'
    ELSE 'Leaf'
END
FROM BST
ORDER BY N

https://www.hackerrank.com/challenges/binary-search-tree-1/problem

https://www.hackerrank.com/challenges/what-type-of-triangle/problem
SELECT CASE
            WHEN A + B > C AND B + C > A AND A + C > B THEN
                CASE
                    WHEN A = B AND B = C THEN 'Equilateral'
                    WHEN A = B OR B = C OR A = C THEN 'Isosceles'
                    ELSE 'Scalene'
                END
            ELSE 'Not A Triangle'
        END
FROM TRIANGLES;
--company_code, founder_name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
https://www.hackerrank.com/challenges/the-company/problem
select Company.company_code, Company.founder,
count(distinct Lead_Manager.lead_manager_code),
count(distinct Senior_Manager.senior_manager_code),
count(distinct Manager.manager_code),
count(distinct Employee.employee_code)
from ((((Company
inner join Lead_Manager on Company.company_code = Lead_Manager.company_code)
inner join Senior_Manager ON Lead_Manager.lead_manager_code = Senior_Manager.lead_manager_code)
inner join Manager On Manager.senior_manager_code = Senior_Manager.senior_manager_code)            inner join Employee On Employee.manager_code = Manager.manager_code)
group by Company.company_code, Company.founder
order by Company.company_code asc;


